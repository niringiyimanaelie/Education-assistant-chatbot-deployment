Project Overview:
This project focuses on deploying an interactive Streamlit-based application named Education ChatBot. 
The chatbot is designed to support educational activities by providing real-time Q&A, summarizing discussions, and creating quizzes. 
It uses OpenAI for generating conversational responses and Pinecone for retrieving context-specific information, making it a versatile tool in classroom settings.

Steps for Development and Deployment:

1. Local Development Setup:
   - Developed the chatbot application using Python and Streamlit to create an intuitive and interactive user interface.
   - Integrated OpenAI's chatgpt-4o-latest model to handle natural language processing and generate detailed responses based on user input.
   - Utilized Pinecone to store and manage vector embeddings, enabling the app to efficiently retrieve relevant pieces of information for each query.

2. Creating a GitHub Repository:
   - Created a new repository on GitHub to manage the project and enable seamless deployment.
   - Added the following key files:
     - app.py: The main script containing the Streamlit code and chatbot logic.
     - requirements.txt: A list of required Python packages, such as streamlit, openai, pinecone-client, and python-dotenv.

3. Securing API Keys:
   - Created a .env file locally to store sensitive API keys for OpenAI and Pinecone:
     OPENAI_API_KEY=your_openai_api_key
     PINECONE_API_KEY=your_pinecone_api_key
   - Updated the .gitignore file to include .env, ensuring that API keys are not pushed to GitHub, maintaining data security.

4. Preparing requirements.txt:
   - Generated a requirements.txt file to define all dependencies required for running the app. This included:
     streamlit
     openai
     pinecone-client
     python-dotenv
     pandas

5. Pushing the Code to GitHub:
   - Committed all changes and pushed the code to the newly created GitHub repository using:
     git add .
     git commit -m "Initial commit with Streamlit chatbot code"
     git push origin main

6. Deploying with Streamlit Community Cloud:
   - Logged into Streamlit Community Cloud via https://share.streamlit.io/ using GitHub credentials.
   - Selected the repository and specified the path to app.py for deployment.
   - Streamlit automatically set up the environment based on the requirements.txt file and deployed the app.

7. Setting Up Environment Variables on Streamlit:
   - In the Streamlit Cloud dashboard, navigated to the "Secrets" section.
   - Added the API keys as environment variables for secure access:
     OPENAI_API_KEY = your_openai_api_key
     PINECONE_API_KEY = your_pinecone_api_key
   - This step ensured that sensitive information remained secure while still being accessible by the deployed app.

8. Functionality Overview:
   - OpenAI Integration:
     - The ask_gpt function uses OpenAI's chatgpt-4o-latest to generate responses based on user queries.
     - This allows the chatbot to provide detailed explanations, summaries, and answers.
   - Pinecone Integration:
     - Pinecone is used to store and query vector embeddings, making it possible to retrieve relevant contexts based on a userâ€™s query.
     - Functions like get_embeddings and get_contexts ensure that the chatbot provides contextually accurate information.

9. Testing the Deployed App:
   - Accessed the deployed Streamlit app through the URL provided by Streamlit Cloud.
   - Entered various educational queries to validate that the chatbot retrieves relevant information using Pinecone and generates accurate answers using OpenAI.
   - Confirmed that the app was performing as expected, offering smooth user interactions and delivering contextually rich responses.

10. Outcome:
    - The app is now live, serving as an Education Assistant that can answer questions, summarize discussions, and create quizzes.
    - This project demonstrates how modern AI tools like OpenAI and Pinecone can be integrated to enhance educational experiences, providing an interactive and engaging platform for teachers and students.
